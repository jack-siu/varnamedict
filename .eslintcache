[{"/Users/jacksiu/Projects/varnamedict/src/index.tsx":"1","/Users/jacksiu/Projects/varnamedict/src/reportWebVitals.ts":"2","/Users/jacksiu/Projects/varnamedict/src/App.tsx":"3","/Users/jacksiu/Projects/varnamedict/src/components/DictionaryPanel/index.tsx":"4","/Users/jacksiu/Projects/varnamedict/src/components/WordCard/index.tsx":"5","/Users/jacksiu/Projects/varnamedict/src/components/AppendixPanel/index.tsx":"6"},{"size":500,"mtime":1608299679072,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1608299679073,"results":"9","hashOfConfig":"8"},{"size":2233,"mtime":1608905903749,"results":"10","hashOfConfig":"8"},{"size":1633,"mtime":1608483450627,"results":"11","hashOfConfig":"8"},{"size":1682,"mtime":1608482615895,"results":"12","hashOfConfig":"8"},{"size":1663,"mtime":1608905930801,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"fefqwb",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"16"},"/Users/jacksiu/Projects/varnamedict/src/index.tsx",[],["31","32"],"/Users/jacksiu/Projects/varnamedict/src/reportWebVitals.ts",[],"/Users/jacksiu/Projects/varnamedict/src/App.tsx",["33"],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css';\nimport { WordDetail } from './types/varnamedict';\nimport DictionaryPanel from './components/DictionaryPanel';\nimport AppendixPanel from './components/AppendixPanel';\n\nfunction App() {\n  const [currentTab, setCurrentTab] = useState<string>('verb');\n  const [verbDict, setVerbDict] = useState<WordDetail[]>([]);\n  const [nounDict, setNounDict] = useState<WordDetail[]>([]);\n  const [adjDict, setAdjDict] = useState<WordDetail[]>([]);\n\n  const getTabButtonClass = (tab: string) => {\n    return tab === currentTab ? 'tab_button tab_button--active' : 'tab_button'\n  }\n\n  const renderDictionaryPanel = () => {\n    if (currentTab === 'verb' && verbDict.length > 0){\n      return <DictionaryPanel wordDetailList={verbDict} />\n    } else if (currentTab === 'noun' && nounDict.length > 0) {\n      return <DictionaryPanel wordDetailList={nounDict} />\n    } else if (currentTab === 'adjective' && adjDict.length > 0) {\n      return <DictionaryPanel wordDetailList={adjDict} />\n    } else if (currentTab === 'appendix') {\n      return <AppendixPanel />\n    }\n  }\n\n  useEffect(() => {\n    axios.all([\n      axios.get('data/verb.json'),\n      axios.get('data/noun.json'),\n      axios.get('data/adj.json')\n    ]).then(axios.spread((verbResponse, nounResponse, adjResponse) => {\n      setVerbDict(verbResponse.data);\n      setNounDict(nounResponse.data);\n      setAdjDict(adjResponse.data);\n    }))\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"tab\">\n          <button className={getTabButtonClass('verb')} onClick={()=>setCurrentTab('verb')}>Verb</button>\n          <button className={getTabButtonClass('noun')} onClick={()=>setCurrentTab('noun')}>Noun</button>\n          <button className={getTabButtonClass('adjective')} onClick={()=>setCurrentTab('adjective')}>Adj</button>\n          <button className={getTabButtonClass('appendix')} onClick={()=>setCurrentTab('appendix')}>Appx.</button>\n        </div>\n        <div className=\"dictionary_panel\">\n          {renderDictionaryPanel()}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/jacksiu/Projects/varnamedict/src/components/DictionaryPanel/index.tsx",[],"/Users/jacksiu/Projects/varnamedict/src/components/WordCard/index.tsx",["34"],"import React, { useState } from 'react';\nimport { WordDetail } from '../../types/varnamedict'\nimport './style.css'\n\ninterface Props {\n  wordDetail: WordDetail,\n  popularity: number\n}\n\nconst WordCard = (props: Props) => {\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const renderWordDetail = () => {\n    if (isExpanded) {\n      let html: JSX.Element[] = [];\n      html.push(<p>{[...Array(Math.ceil(props.popularity))].map((e, j) => <span key={j}>ðŸ”¥</span>)}</p>)\n      for (let i = 0; i < props.wordDetail.examples.length; i += 1) {\n        let example = props.wordDetail.examples[i]\n        let exampleHrefBaseURL = new URL(example.repoPath.replace('git://', 'https://').replace('.git', '/'))\n        let exampleHrefFilePath = ''\n        if (example.filePath.split('/').length > 2) {\n          const filePathArray = example.filePath.split('/')\n          filePathArray.splice(1, 1)\n          exampleHrefFilePath = filePathArray.join('/')\n        }\n        let exampleHrefFullURL = new URL('./blob/master/', exampleHrefBaseURL);\n        exampleHrefFullURL = new URL(exampleHrefFilePath, exampleHrefFullURL)\n        html.push(<p key={`${example.repoName}_${example.varName}`}>{example.varName} from <a className=\"example_hyperlink\" target=\"_blank\" href={exampleHrefFullURL.toString()}>{example.repoName}</a></p>)\n      }\n      return (\n        <div className=\"word_details\">\n          {html}\n        </div>\n      )\n    }\n  }\n\n  return (\n    <div>\n      <button type=\"button\" className=\"word_button\" onClick={()=>setIsExpanded(!isExpanded)}>{isExpanded ? '- ' : '+ '} {props.wordDetail.word}</button>\n      {renderWordDetail()}\n    </div>\n  );\n}\n\nexport default WordCard;\n",["35","36"],"/Users/jacksiu/Projects/varnamedict/src/components/AppendixPanel/index.tsx",["37","38"],"import React, { useState } from 'react';\nimport { WordDetail } from '../../types/varnamedict'\nimport './style.css'\n\nconst AppendixPanel = () => {\n  return (\n    <div className=\"appendix_panel\">\n      <div>\n        <h2>Gallary</h2>\n        <div className=\"appendix_panel__wordcloud_container\">\n          <img className=\"appendix_panel__wordcloud_image\" src=\"images/cloudVerb.jpg\" alt=\"Verb\"></img>\n          <small>Word Cloud of parsed Verb</small>\n        </div>\n        <div className=\"appendix_panel__wordcloud_container\">\n          <img className=\"appendix_panel__wordcloud_image\" src=\"images/cloudNoun.jpg\" alt=\"Noun\"></img>\n          <small>Word Cloud of parsed Noun</small>\n        </div>\n        <div className=\"appendix_panel__wordcloud_container\">\n          <img className=\"appendix_panel__wordcloud_image\" src=\"images/cloudAdj.jpg\" alt=\"Adj\"></img>\n          <small>Word Cloud of parsed Adjective</small>\n        </div>\n      </div>\n      <div>\n        <h2>Data</h2>\n        <div className=\"appendix_panel__download_link_container\">\n          <a className=\"appendix_panel__download_link\" href=\"data/verb.json\" download=\"verb.json\" target=\"_blank\">verb.json</a>\n        </div>\n        <div className=\"appendix_panel__download_link_container\">\n          <a className=\"appendix_panel__download_link\" href=\"data/noun.json\" download=\"noun.json\" target=\"_blank\">noun.json</a>\n        </div>\n        <div className=\"appendix_panel__download_link_container\">\n          <a className=\"appendix_panel__download_link\" href=\"data/adj.json\" download=\"adj.json\" target=\"_blank\">adj.json</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AppendixPanel;\n",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":3,"column":8,"nodeType":"45","messageId":"46","endLine":3,"endColumn":12},{"ruleId":"47","severity":1,"message":"48","line":28,"column":125,"nodeType":"49","endLine":28,"endColumn":140},{"ruleId":"39","replacedBy":"50"},{"ruleId":"41","replacedBy":"51"},{"ruleId":"43","severity":1,"message":"52","line":1,"column":17,"nodeType":"45","messageId":"46","endLine":1,"endColumn":25},{"ruleId":"43","severity":1,"message":"53","line":2,"column":10,"nodeType":"45","messageId":"46","endLine":2,"endColumn":20},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["54"],["55"],"'useState' is defined but never used.","'WordDetail' is defined but never used.","no-global-assign","no-unsafe-negation"]