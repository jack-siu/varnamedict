{"version":3,"sources":["components/WordCard/index.tsx","components/DictionaryPanel/index.tsx","components/AppendixPanel/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WordCard","props","useState","isExpanded","setIsExpanded","type","className","onClick","wordDetail","word","html","push","Array","Math","ceil","popularity","map","e","j","i","examples","length","example","exampleHrefBaseURL","URL","repoPath","replace","exampleHrefFilePath","filePath","split","filePathArray","splice","join","exampleHrefFullURL","varName","target","href","toString","repoName","renderWordDetail","DictionaryPanel","searchBarText","setSearchBarText","calculatePopularity","wordDetailList","findIndex","ele","placeholder","value","onChange","searchResult","filter","includes","renderSearhResult","AppendixPanel","src","alt","download","App","currentTab","setCurrentTab","verbDict","setVerbDict","nounDict","setNounDict","adjDict","setAdjDict","getTabButtonClass","tab","useEffect","axios","all","get","then","spread","verbResponse","nounResponse","adjResponse","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e7c3d60.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { WordDetail } from '../../types/varnamedict'\nimport './style.css'\n\ninterface Props {\n  wordDetail: WordDetail,\n  popularity: number\n}\n\nconst WordCard = (props: Props) => {\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const renderWordDetail = () => {\n    if (isExpanded) {\n      let html: JSX.Element[] = [];\n      html.push(<p>{[...Array(Math.ceil(props.popularity))].map((e, j) => <span key={j}>ðŸ”¥</span>)}</p>)\n      for (let i = 0; i < props.wordDetail.examples.length; i += 1) {\n        let example = props.wordDetail.examples[i]\n        let exampleHrefBaseURL = new URL(example.repoPath.replace('git://', 'https://').replace('.git', '/'))\n        let exampleHrefFilePath = ''\n        if (example.filePath.split('/').length > 2) {\n          const filePathArray = example.filePath.split('/')\n          filePathArray.splice(1, 1)\n          exampleHrefFilePath = filePathArray.join('/')\n        }\n        let exampleHrefFullURL = new URL('./blob/master/', exampleHrefBaseURL);\n        exampleHrefFullURL = new URL(exampleHrefFilePath, exampleHrefFullURL)\n        html.push(<p key={`${example.repoName}_${example.varName}`}>{example.varName} from <a className=\"example_hyperlink\" target=\"_blank\" href={exampleHrefFullURL.toString()}>{example.repoName}</a></p>)\n      }\n      return (\n        <div className=\"word_details\">\n          {html}\n        </div>\n      )\n    }\n  }\n\n  return (\n    <div>\n      <button type=\"button\" className=\"word_button\" onClick={()=>setIsExpanded(!isExpanded)}>{isExpanded ? '- ' : '+ '} {props.wordDetail.word}</button>\n      {renderWordDetail()}\n    </div>\n  );\n}\n\nexport default WordCard;\n","import React, { useState } from 'react';\nimport { WordDetail } from '../../types/varnamedict'\nimport WordCard from '../WordCard';\nimport './style.css'\n\ninterface Props {\n  wordDetailList: WordDetail[],\n}\n\nconst DictionaryPanel = (props: Props) => {\n  // const [searchResult, setSearchResult] = useState<WordDetail[]>(props.wordDetailList);\n  const [searchBarText, setSearchBarText] = useState<string>('')\n\n  const handleSearchBarTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchBarText(e.target.value);\n  }\n\n  const calculatePopularity = (word: string) => {\n    let index = props.wordDetailList.findIndex((ele) => ele.word === word)\n    // Just use linear distribution\n    return 5 * (1 - index/props.wordDetailList.length);\n  }\n\n  const renderSearhResult = () => {\n    let searchResult = props.wordDetailList\n    if (searchBarText) {\n      searchResult = searchResult.filter((ele)=> ele.word.includes(searchBarText))\n    }\n    const html:JSX.Element[]  = []\n    for (let i = 0; i < searchResult.length; i += 1){\n      if (searchResult[i].examples) {\n        html.push(\n          <WordCard key={`${searchResult[i].word}`} wordDetail={searchResult[i]} popularity={calculatePopularity(searchResult[i].word)}/>\n        )\n      }\n    }\n    return html;\n  }\n\n  return (\n    <div>\n      <input\n        className=\"search_bar\"\n        placeholder=\"Type word to filter\"\n        type=\"text\"\n        value={searchBarText}\n        onChange={handleSearchBarTextChange}>\n      </input>\n      <div className=\"search_result_panel\">\n        {renderSearhResult()}\n      </div>\n    </div>\n  );\n}\n\nexport default DictionaryPanel;\n","import React, { useState } from 'react';\nimport { WordDetail } from '../../types/varnamedict'\nimport './style.css'\n\nconst AppendixPanel = () => {\n  return (\n    <div className=\"appendix_panel\">\n      <div>\n        <h2>Gallary</h2>\n        <div className=\"appendix_panel__wordcloud_container\">\n          <img className=\"appendix_panel__wordcloud_image\" src=\"images/cloudVerb.jpg\" alt=\"Verb\"></img>\n          <small>Word Cloud of parsed Verb</small>\n        </div>\n        <div className=\"appendix_panel__wordcloud_container\">\n          <img className=\"appendix_panel__wordcloud_image\" src=\"images/cloudNoun.jpg\" alt=\"Noun\"></img>\n          <small>Word Cloud of parsed Noun</small>\n        </div>\n        <div className=\"appendix_panel__wordcloud_container\">\n          <img className=\"appendix_panel__wordcloud_image\" src=\"images/cloudAdj.jpg\" alt=\"Adj\"></img>\n          <small>Word Cloud of parsed Adjective</small>\n        </div>\n      </div>\n      <div>\n        <h2>Data</h2>\n        <div className=\"appendix_panel__download_link_container\">\n          <a className=\"appendix_panel__download_link\" href=\"data/verb.json\" download=\"verb.json\" target=\"_blank\">verb.json</a>\n        </div>\n        <div className=\"appendix_panel__download_link_container\">\n          <a className=\"appendix_panel__download_link\" href=\"data/noun.json\" download=\"noun.json\" target=\"_blank\">noun.json</a>\n        </div>\n        <div className=\"appendix_panel__download_link_container\">\n          <a className=\"appendix_panel__download_link\" href=\"data/adj.json\" download=\"adj.json\" target=\"_blank\">adj.json</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AppendixPanel;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css';\nimport { WordDetail } from './types/varnamedict';\nimport DictionaryPanel from './components/DictionaryPanel';\nimport AppendixPanel from './components/AppendixPanel';\n\nfunction App() {\n  const [currentTab, setCurrentTab] = useState<string>('verb');\n  const [verbDict, setVerbDict] = useState<WordDetail[]>([]);\n  const [nounDict, setNounDict] = useState<WordDetail[]>([]);\n  const [adjDict, setAdjDict] = useState<WordDetail[]>([]);\n\n  const getTabButtonClass = (tab: string) => {\n    return tab === currentTab ? 'tab_button tab_button--active' : 'tab_button'\n  }\n\n  const renderDictionaryPanel = () => {\n    if (currentTab === 'verb' && verbDict.length > 0){\n      return <DictionaryPanel wordDetailList={verbDict} />\n    } else if (currentTab === 'noun' && nounDict.length > 0) {\n      return <DictionaryPanel wordDetailList={nounDict} />\n    } else if (currentTab === 'adjective' && adjDict.length > 0) {\n      return <DictionaryPanel wordDetailList={adjDict} />\n    } else if (currentTab === 'appendix') {\n      return <AppendixPanel />\n    }\n  }\n\n  useEffect(() => {\n    axios.all([\n      axios.get('data/verb.json'),\n      axios.get('data/noun.json'),\n      axios.get('data/adj.json')\n    ]).then(axios.spread((verbResponse, nounResponse, adjResponse) => {\n      setVerbDict(verbResponse.data);\n      setNounDict(nounResponse.data);\n      setAdjDict(adjResponse.data);\n    }))\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"tab\">\n          <button className={getTabButtonClass('verb')} onClick={()=>setCurrentTab('verb')}>Verb</button>\n          <button className={getTabButtonClass('noun')} onClick={()=>setCurrentTab('noun')}>Noun</button>\n          <button className={getTabButtonClass('adjective')} onClick={()=>setCurrentTab('adjective')}>Adj</button>\n          <button className={getTabButtonClass('appendix')} onClick={()=>setCurrentTab('appendix')}>Appx.</button>\n        </div>\n        <div className=\"dictionary_panel\">\n          {renderDictionaryPanel()}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}